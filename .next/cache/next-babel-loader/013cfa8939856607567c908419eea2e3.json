{"ast":null,"code":"import connectDB from '../../../utils/connectDB';\nimport Categories from '../../../models/categoriesModel';\nimport auth from '../../../middleware/auth';\nexport default (async (req, res) => {\n  switch (req.method) {\n    case \"POST\":\n      await createCategory(req, res);\n      break;\n\n    case \"GET\":\n      await getCategories(req, res);\n      break;\n  }\n});\n\nconst createCategory = async (req, res) => {\n  try {\n    const result = await auth(req, res);\n    if (result.role !== 'admin') return res.status(400).json({\n      err: \"Authentication is not valid.\"\n    });\n    const {\n      name\n    } = req.body;\n    if (!name) return res.status(400).json({\n      err: \"Name can not be left blank.\"\n    });\n    const newCategory = new Categories({\n      name\n    });\n    await newCategory.save();\n    res.json({\n      msg: 'Success! Created a new category.',\n      newCategory\n    });\n  } catch (err) {\n    return res.status(500).json({\n      err: err.message\n    });\n  }\n};\n\nconst getCategories = async (req, res) => {\n  try {\n    const categories = await Categories.find();\n    res.json({\n      categories\n    });\n  } catch (err) {\n    return res.status(500).json({\n      err: err.message\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/Abdulhekim abdullah/Desktop/News project/backend/NSiteApi/nextClient/pages/api/categories/index.js"],"names":["connectDB","Categories","auth","req","res","method","createCategory","getCategories","result","role","status","json","err","name","body","newCategory","save","msg","message","categories","find"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,0BAAtB;AACA,OAAOC,UAAP,MAAuB,iCAAvB;AACA,OAAOC,IAAP,MAAiB,0BAAjB;AAIA,gBAAe,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAC/B,UAAOD,GAAG,CAACE,MAAX;AACI,SAAK,MAAL;AACI,YAAMC,cAAc,CAACH,GAAD,EAAMC,GAAN,CAApB;AACA;;AACJ,SAAK,KAAL;AACI,YAAMG,aAAa,CAACJ,GAAD,EAAMC,GAAN,CAAnB;AACA;AANR;AAQH,CATD;;AAWA,MAAME,cAAc,GAAG,OAAOH,GAAP,EAAYC,GAAZ,KAAoB;AACvC,MAAI;AACA,UAAMI,MAAM,GAAG,MAAMN,IAAI,CAACC,GAAD,EAAMC,GAAN,CAAzB;AACA,QAAGI,MAAM,CAACC,IAAP,KAAgB,OAAnB,EACA,OAAOL,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,MAAAA,GAAG,EAAE;AAAN,KAArB,CAAP;AAEA,UAAM;AAAEC,MAAAA;AAAF,QAAWV,GAAG,CAACW,IAArB;AACA,QAAG,CAACD,IAAJ,EAAU,OAAOT,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,MAAAA,GAAG,EAAE;AAAN,KAArB,CAAP;AAEV,UAAMG,WAAW,GAAG,IAAId,UAAJ,CAAe;AAACY,MAAAA;AAAD,KAAf,CAApB;AAEA,UAAME,WAAW,CAACC,IAAZ,EAAN;AACAZ,IAAAA,GAAG,CAACO,IAAJ,CAAS;AACLM,MAAAA,GAAG,EAAE,kCADA;AAELF,MAAAA;AAFK,KAAT;AAKH,GAhBD,CAgBE,OAAOH,GAAP,EAAY;AACV,WAAOR,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,MAAAA,GAAG,EAAEA,GAAG,CAACM;AAAV,KAArB,CAAP;AACH;AACJ,CApBD;;AAsBA,MAAMX,aAAa,GAAG,OAAOJ,GAAP,EAAYC,GAAZ,KAAoB;AACtC,MAAI;AACA,UAAMe,UAAU,GAAG,MAAMlB,UAAU,CAACmB,IAAX,EAAzB;AAEAhB,IAAAA,GAAG,CAACO,IAAJ,CAAS;AAACQ,MAAAA;AAAD,KAAT;AAEH,GALD,CAKE,OAAOP,GAAP,EAAY;AACV,WAAOR,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,MAAAA,GAAG,EAAEA,GAAG,CAACM;AAAV,KAArB,CAAP;AACH;AACJ,CATD","sourcesContent":["import connectDB from '../../../utils/connectDB'\r\nimport Categories from '../../../models/categoriesModel'\r\nimport auth from '../../../middleware/auth'\r\n\r\n\r\n\r\nexport default async (req, res) => {\r\n    switch(req.method){\r\n        case \"POST\":\r\n            await createCategory(req, res)\r\n            break;\r\n        case \"GET\":\r\n            await getCategories(req, res)\r\n            break;\r\n    }\r\n}\r\n\r\nconst createCategory = async (req, res) => {\r\n    try {\r\n        const result = await auth(req, res)\r\n        if(result.role !== 'admin')\r\n        return res.status(400).json({err: \"Authentication is not valid.\"})\r\n\r\n        const { name } = req.body\r\n        if(!name) return res.status(400).json({err: \"Name can not be left blank.\"})\r\n\r\n        const newCategory = new Categories({name})\r\n\r\n        await newCategory.save()\r\n        res.json({\r\n            msg: 'Success! Created a new category.',\r\n            newCategory\r\n        })\r\n\r\n    } catch (err) {\r\n        return res.status(500).json({err: err.message})\r\n    }\r\n}\r\n\r\nconst getCategories = async (req, res) => {\r\n    try {\r\n        const categories = await Categories.find()\r\n\r\n        res.json({categories})\r\n\r\n    } catch (err) {\r\n        return res.status(500).json({err: err.message})\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}