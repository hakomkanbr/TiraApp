{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport connectDB from '../../../utils/connectDB';\nimport Products from '../../../models/productModel';\nimport auth from '../../../middleware/auth';\nexport default (async (req, res) => {\n  switch (req.method) {\n    case \"GET\":\n      await getProducts(req, res);\n      break;\n\n    case \"POST\":\n      await createProduct(req, res);\n      break;\n  }\n});\n\nclass APIfeatures {\n  constructor(query, queryString) {\n    this.query = query;\n    this.queryString = queryString;\n  }\n\n  filtering() {\n    const queryObj = _objectSpread({}, this.queryString);\n\n    const excludeFields = ['page', 'sort', 'limit'];\n    excludeFields.forEach(el => delete queryObj[el]);\n    if (queryObj.category !== 'all') this.query.find({\n      category: queryObj.category\n    });\n    if (queryObj.title !== 'all') this.query.find({\n      title: {\n        $regex: queryObj.title\n      }\n    });\n    this.query.find();\n    return this;\n  }\n\n  sorting() {\n    if (this.queryString.sort) {\n      const sortBy = this.queryString.sort.split(',').join('');\n      this.query = this.query.sort(sortBy);\n    } else {\n      this.query = this.query.sort('-createdAt');\n    }\n\n    return this;\n  }\n\n  paginating() {\n    const page = this.queryString.page * 1 || 1;\n    const limit = this.queryString.limit * 1 || 6;\n    const skip = (page - 1) * limit;\n    this.query = this.query.skip(skip).limit(limit);\n    return this;\n  }\n\n}\n\nconst getProducts = async (req, res) => {\n  try {\n    const features = new APIfeatures(Products.find(), req.query).filtering().sorting().paginating();\n    const products = await features.query;\n    res.json({\n      status: 'success',\n      result: products.length,\n      products\n    });\n  } catch (err) {\n    return res.status(500).json({\n      err: err.message\n    });\n  }\n};\n\nconst createProduct = async (req, res) => {\n  try {\n    const result = await auth(req, res);\n    if (result.role !== 'admin') return res.status(400).json({\n      err: 'Authentication is not valid.'\n    });\n    const {\n      title,\n      price,\n      inStock,\n      description,\n      content,\n      category,\n      images\n    } = req.body;\n    if (!title || !price || !inStock || !description || !content || category === 'all' || images.length === 0) return res.status(400).json({\n      err: 'Please add all the fields.'\n    });\n    const newProduct = new Products({\n      title: title.toLowerCase(),\n      price,\n      inStock,\n      description,\n      content,\n      category,\n      images\n    });\n    await newProduct.save();\n    res.json({\n      msg: 'Success! Created a new product'\n    });\n  } catch (err) {\n    return res.status(500).json({\n      err: err.message\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/Abdulhekim abdullah/Desktop/News project/backend/NSiteApi/nextClient/pages/api/product/index.js"],"names":["connectDB","Products","auth","req","res","method","getProducts","createProduct","APIfeatures","constructor","query","queryString","filtering","queryObj","excludeFields","forEach","el","category","find","title","$regex","sorting","sort","sortBy","split","join","paginating","page","limit","skip","features","products","json","status","result","length","err","message","role","price","inStock","description","content","images","body","newProduct","toLowerCase","save","msg"],"mappings":"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","sourcesContent":["import connectDB from '../../../utils/connectDB'\r\nimport Products from '../../../models/productModel'\r\nimport auth from '../../../middleware/auth'\r\n\r\n\r\n\r\nexport default async (req, res) => {\r\n    switch(req.method){\r\n        case \"GET\":\r\n            await getProducts(req, res)\r\n            break;\r\n        case \"POST\":\r\n            await createProduct(req, res)\r\n            break;\r\n    }\r\n}\r\n\r\nclass APIfeatures {\r\n    constructor(query, queryString){\r\n        this.query = query;\r\n        this.queryString = queryString;\r\n    }\r\n    filtering(){\r\n        const queryObj = {...this.queryString}\r\n\r\n        const excludeFields = ['page', 'sort', 'limit']\r\n        excludeFields.forEach(el => delete(queryObj[el]))\r\n\r\n        if(queryObj.category !== 'all')\r\n            this.query.find({category: queryObj.category})\r\n        if(queryObj.title !== 'all')\r\n            this.query.find({title: {$regex: queryObj.title}})\r\n\r\n        this.query.find()\r\n        return this;\r\n    }\r\n\r\n    sorting(){\r\n        if(this.queryString.sort){\r\n            const sortBy = this.queryString.sort.split(',').join('')\r\n            this.query = this.query.sort(sortBy)\r\n        }else{\r\n            this.query = this.query.sort('-createdAt')\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    paginating(){\r\n        const page = this.queryString.page * 1 || 1\r\n        const limit = this.queryString.limit * 1 || 6\r\n        const skip = (page - 1) * limit;\r\n        this.query = this.query.skip(skip).limit(limit)\r\n        return this;\r\n    }\r\n}\r\n\r\nconst getProducts = async (req, res) => {\r\n    try {\r\n        const features = new APIfeatures(Products.find(), req.query)\r\n        .filtering().sorting().paginating()\r\n\r\n        const products = await features.query\r\n        \r\n        res.json({\r\n            status: 'success',\r\n            result: products.length,\r\n            products\r\n        })\r\n    } catch (err) {\r\n        return res.status(500).json({err: err.message})\r\n    }\r\n}\r\n\r\nconst createProduct = async (req, res) => {\r\n    try {\r\n        const result = await auth(req, res)\r\n        if(result.role !== 'admin') return res.status(400).json({err: 'Authentication is not valid.'})\r\n\r\n        const {title, price, inStock, description, content, category, images} = req.body\r\n\r\n        if(!title || !price || !inStock || !description || !content || category === 'all' || images.length === 0)\r\n        return res.status(400).json({err: 'Please add all the fields.'})\r\n\r\n\r\n        const newProduct = new Products({\r\n            title: title.toLowerCase(), price, inStock, description, content, category, images\r\n        })\r\n\r\n        await newProduct.save()\r\n\r\n        res.json({msg: 'Success! Created a new product'})\r\n\r\n    } catch (err) {\r\n        return res.status(500).json({err: err.message})\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}