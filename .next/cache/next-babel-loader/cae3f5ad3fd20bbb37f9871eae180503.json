{"ast":null,"code":"import jwt from 'jsonwebtoken';\nimport Users from '../models/userModel';\n\nconst auth = async (req, res) => {\n  const token = req.headers.authorization;\n  if (!token) return res.status(400).json({\n    err: 'Invalid Authentication.'\n  });\n  const decoded = jwt.verify(token, process.env.ACCESS_TOKEN_SECRET);\n  if (!decoded) return res.status(400).json({\n    err: 'Invalid Authentication.'\n  });\n  const user = await Users.findOne({\n    _id: decoded.id\n  });\n  return {\n    id: user._id,\n    role: user.role,\n    root: user.root\n  };\n};\n\nexport default auth;","map":{"version":3,"sources":["C:/Users/Abdulhekim abdullah/Desktop/News project/backend/NSiteApi/nextClient/middleware/auth.js"],"names":["jwt","Users","auth","req","res","token","headers","authorization","status","json","err","decoded","verify","process","env","ACCESS_TOKEN_SECRET","user","findOne","_id","id","role","root"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,cAAhB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;;AAGA,MAAMC,IAAI,GAAG,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAC7B,QAAMC,KAAK,GAAGF,GAAG,CAACG,OAAJ,CAAYC,aAA1B;AACA,MAAG,CAACF,KAAJ,EAAW,OAAOD,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,IAAAA,GAAG,EAAE;AAAN,GAArB,CAAP;AAEX,QAAMC,OAAO,GAAGX,GAAG,CAACY,MAAJ,CAAWP,KAAX,EAAkBQ,OAAO,CAACC,GAAR,CAAYC,mBAA9B,CAAhB;AACA,MAAG,CAACJ,OAAJ,EAAa,OAAOP,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,IAAAA,GAAG,EAAE;AAAN,GAArB,CAAP;AAEb,QAAMM,IAAI,GAAG,MAAMf,KAAK,CAACgB,OAAN,CAAc;AAACC,IAAAA,GAAG,EAAEP,OAAO,CAACQ;AAAd,GAAd,CAAnB;AAEA,SAAO;AAACA,IAAAA,EAAE,EAAEH,IAAI,CAACE,GAAV;AAAeE,IAAAA,IAAI,EAAEJ,IAAI,CAACI,IAA1B;AAAgCC,IAAAA,IAAI,EAAEL,IAAI,CAACK;AAA3C,GAAP;AACH,CAVD;;AAaA,eAAenB,IAAf","sourcesContent":["import jwt from 'jsonwebtoken'\r\nimport Users from '../models/userModel'\r\n\r\n\r\nconst auth = async (req, res) => {\r\n    const token = req.headers.authorization;\r\n    if(!token) return res.status(400).json({err: 'Invalid Authentication.'})\r\n\r\n    const decoded = jwt.verify(token, process.env.ACCESS_TOKEN_SECRET)\r\n    if(!decoded) return res.status(400).json({err: 'Invalid Authentication.'})\r\n\r\n    const user = await Users.findOne({_id: decoded.id})\r\n\r\n    return {id: user._id, role: user.role, root: user.root};\r\n}\r\n\r\n\r\nexport default auth"]},"metadata":{},"sourceType":"module"}