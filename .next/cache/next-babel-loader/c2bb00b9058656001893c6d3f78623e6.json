{"ast":null,"code":"import { authService } from '../../services/authServices';\nimport authConfig from '../../config/siteConfig';\nimport { ErrorProviderCallout } from '../../services/hataYoetimi';\nexport const CHECK_AUTHORIZATION = 'CHECK_AUTHORIZATION';\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nexport const LOGIN_ERROR = \"LOGIN_ERROR\";\nexport const CHECK_LOGIN = \"CHECK_LOGIN\";\nexport const LOGOUT = \"LOGOUT\";\n\nconst loginSuccess = user => {\n  return {\n    type: LOGIN_SUCCESS,\n    user\n  };\n};\n\nconst loginError = error => {\n  return {\n    type: LOGIN_ERROR,\n    error\n  };\n};\n\nexport const checkAuthorization = () => {\n  const token = localStorage.getItem(authConfig.tokenLabel);\n\n  if (token) {\n    //is exp?\n    return dispatch => {\n      dispatch(loginSuccess(token));\n    };\n  }\n\n  return dispatch => {\n    dispatch(loginError(\"\"));\n  };\n};\nexport const login = (username, password) => {\n  return dispatch => {\n    authService.login(username, password).then(result => {\n      let data = result.data; // console.error(result);\n      // console.error(data);\n\n      if (data.status === false) {\n        console.error(\"false geldi\"); // dispatch(loginSuccess(data));\n\n        dispatch(loginError(data.error));\n        return;\n      }\n\n      window.location.assign(\"/Admin\");\n    }).catch(err => {\n      ErrorProviderCallout(err); // let status = err.response?.data ;\n      // console.log(err.response.data.description)\n      // let message = \"\";\n      // status === 401\n      //     ?  message = status\n      //     :  message = err.response.data.description\n      // dispatch(loginError(message));\n    });\n  };\n};\nexport const logout = () => {\n  authService.logOut();\n  return {\n    type: LOGOUT\n  };\n};","map":{"version":3,"sources":["C:/Users/Abdulhekim abdullah/Desktop/News project/backend/NSiteApi/nextClient/redux/auth/actions.js"],"names":["authService","authConfig","ErrorProviderCallout","CHECK_AUTHORIZATION","LOGIN_SUCCESS","LOGIN_ERROR","CHECK_LOGIN","LOGOUT","loginSuccess","user","type","loginError","error","checkAuthorization","token","localStorage","getItem","tokenLabel","dispatch","login","username","password","then","result","data","status","console","window","location","assign","catch","err","logout","logOut"],"mappings":"AAAA,SAASA,WAAT,QAA4B,6BAA5B;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,SAASC,oBAAT,QAAqC,4BAArC;AAEA,OAAO,MAAMC,mBAAmB,GAAM,qBAA/B;AACP,OAAO,MAAMC,aAAa,GAAY,eAA/B;AACP,OAAO,MAAMC,WAAW,GAAc,aAA/B;AACP,OAAO,MAAMC,WAAW,GAAc,aAA/B;AACP,OAAO,MAAMC,MAAM,GAAmB,QAA/B;;AAEP,MAAMC,YAAY,GAAGC,IAAI,IAAI;AACzB,SAAO;AACHC,IAAAA,IAAI,EAAEN,aADH;AAEHK,IAAAA;AAFG,GAAP;AAIH,CALD;;AAOA,MAAME,UAAU,GAAGC,KAAK,IAAI;AACxB,SAAO;AACHF,IAAAA,IAAI,EAAEL,WADH;AAEHO,IAAAA;AAFG,GAAP;AAIH,CALD;;AAOA,OAAO,MAAMC,kBAAkB,GAAG,MAAM;AACpC,QAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqBf,UAAU,CAACgB,UAAhC,CAAd;;AACA,MAAIH,KAAJ,EAAW;AACP;AACA,WAAOI,QAAQ,IAAI;AACfA,MAAAA,QAAQ,CAACV,YAAY,CAACM,KAAD,CAAb,CAAR;AACH,KAFD;AAGH;;AACD,SAAOI,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAACP,UAAU,CAAC,EAAD,CAAX,CAAR;AACH,GAFD;AAGH,CAXM;AAaP,OAAO,MAAMQ,KAAK,GAAG,CAACC,QAAD,EAAWC,QAAX,KAAwB;AACzC,SAAOH,QAAQ,IAAI;AACflB,IAAAA,WAAW,CAACmB,KAAZ,CAAkBC,QAAlB,EAA4BC,QAA5B,EACKC,IADL,CACUC,MAAM,IAAI;AACZ,UAAIC,IAAI,GAAGD,MAAM,CAACC,IAAlB,CADY,CAEZ;AACA;;AAEA,UAAGA,IAAI,CAACC,MAAL,KAAgB,KAAnB,EAAyB;AACrBC,QAAAA,OAAO,CAACd,KAAR,CAAc,aAAd,EADqB,CAGrB;;AACAM,QAAAA,QAAQ,CAACP,UAAU,CAACa,IAAI,CAACZ,KAAN,CAAX,CAAR;AACA;AACH;;AACDe,MAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,QAAvB;AACH,KAdL,EAeKC,KAfL,CAeWC,GAAG,IAAI;AACV7B,MAAAA,oBAAoB,CAAC6B,GAAD,CAApB,CADU,CAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACH,KAxBL;AAyBH,GA1BD;AA2BH,CA5BM;AA8BP,OAAO,MAAMC,MAAM,GAAG,MAAM;AACxBhC,EAAAA,WAAW,CAACiC,MAAZ;AACA,SAAO;AACHvB,IAAAA,IAAI,EAAEH;AADH,GAAP;AAGH,CALM","sourcesContent":["import { authService } from '../../services/authServices';\r\nimport authConfig from '../../config/siteConfig';\r\nimport { ErrorProviderCallout } from '../../services/hataYoetimi';\r\n \r\nexport const CHECK_AUTHORIZATION    = 'CHECK_AUTHORIZATION';\r\nexport const LOGIN_SUCCESS          = 'LOGIN_SUCCESS';\r\nexport const LOGIN_ERROR            = \"LOGIN_ERROR\";\r\nexport const CHECK_LOGIN            = \"CHECK_LOGIN\";\r\nexport const LOGOUT                 = \"LOGOUT\";\r\n\r\nconst loginSuccess = user => {\r\n    return {\r\n        type: LOGIN_SUCCESS,\r\n        user\r\n    };\r\n};\r\n\r\nconst loginError = error => {\r\n    return {\r\n        type: LOGIN_ERROR,\r\n        error\r\n    };\r\n};\r\n\r\nexport const checkAuthorization = () => {\r\n    const token = localStorage.getItem(authConfig.tokenLabel);\r\n    if (token) {\r\n        //is exp?\r\n        return dispatch => {\r\n            dispatch(loginSuccess(token))\r\n        }\r\n    }\r\n    return dispatch => {\r\n        dispatch(loginError(\"\"))\r\n    }\r\n}\r\n\r\nexport const login = (username, password) => {\r\n    return dispatch => {\r\n        authService.login(username, password)\r\n            .then(result => {\r\n                let data = result.data;\r\n                // console.error(result);\r\n                // console.error(data);\r\n               \r\n                if(data.status === false){\r\n                    console.error(\"false geldi\");\r\n                   \r\n                    // dispatch(loginSuccess(data));\r\n                    dispatch(loginError(data.error));\r\n                    return;\r\n                }\r\n                window.location.assign(\"/Admin\");\r\n            })\r\n            .catch(err => {\r\n                ErrorProviderCallout(err)\r\n                // let status = err.response?.data ;\r\n                // console.log(err.response.data.description)\r\n                // let message = \"\";\r\n                // status === 401\r\n                //     ?  message = status\r\n                //     :  message = err.response.data.description\r\n                // dispatch(loginError(message));\r\n            });\r\n    }\r\n}\r\n\r\nexport const logout = () => {\r\n    authService.logOut();\r\n    return {\r\n        type: LOGOUT,\r\n    };\r\n}\r\n "]},"metadata":{},"sourceType":"module"}